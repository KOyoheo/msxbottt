import logging
import asyncio
import signal
import sys
from datetime import datetime
from logging.handlers import RotatingFileHandler
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from telegram.constants import ParseMode

from config import BOT_TOKEN, ADMIN_IDS, WELCOME_MESSAGE, SHOP_NAME
from database import Database
from keyboards import *

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        RotatingFileHandler('bot.log', encoding='utf-8', maxBytes=10*1024*1024, backupCount=5),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSING_OPTION, ENTERING_ORDER, CHOOSING_PAYMENT, ENTERING_ADDRESS, CONFIRMING_ORDER = range(5)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
db = Database()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
bot_stats = {
    'start_time': datetime.now(),
    'total_users': 0,
    'total_orders': 0,
    'errors': 0
}

async def graceful_shutdown(signal, loop):
    """–ì—Ä–∞—Ü—ñ–æ–∑–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signal.name}...")
    logger.info("–ó—É–ø–∏–Ω—è—é –±–æ—Ç–∞...")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_bot_stats()
    
    # –ó—É–ø–∏–Ω—è—î–º–æ event loop
    loop.stop()
    logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")

def save_bot_stats():
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    try:
        stats_data = {
            'start_time': bot_stats['start_time'].isoformat(),
            'total_users': bot_stats['total_users'],
            'total_orders': bot_stats['total_orders'],
            'errors': bot_stats['errors'],
            'uptime_hours': (datetime.now() - bot_stats['start_time']).total_seconds() / 3600
        }
        
        with open('bot_stats.json', 'w', encoding='utf-8') as f:
            import json
            json.dump(stats_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞: {stats_data}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞"""
    try:
        user = update.effective_user
        
        # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user.id in user_data:
            del user_data[user.id]
        
        db.add_user(user.id, user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π", user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π")
        bot_stats['total_users'] += 1
        
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
        
        await update.message.reply_text(
            WELCOME_MESSAGE,
            reply_markup=get_main_keyboard()
        )
        return CHOOSING_OPTION
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ start: {e}")
        bot_stats['errors'] += 1
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return CHOOSING_OPTION

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == 'back_to_main':
            # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
            if user_id in user_data:
                del user_data[user_id]
            
            await query.edit_message_text(
                WELCOME_MESSAGE,
                reply_markup=get_main_keyboard()
            )
            return CHOOSING_OPTION
        
        elif query.data in ['in_stock', 'pre_order']:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
            user_data[user_id] = {'order_type': query.data}
            
            message_text = "üìù –í–≤–µ–¥—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
            if query.data == 'in_stock':
                message_text += "üèÄ –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –∑ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ?\n"
            else:
                message_text += "üìã –©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?\n"
            
            message_text += "\nüí° –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!"
            
            await query.edit_message_text(
                message_text,
                reply_markup=get_back_keyboard()
            )
            return ENTERING_ORDER
        
        elif query.data in ['cash_on_delivery', 'prepayment']:
            if user_id in user_data and 'order_type' in user_data[user_id]:
                user_data[user_id]['payment_method'] = query.data
                
                payment_text = "üí≥ –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:\n\n"
                if query.data == 'cash_on_delivery':
                    payment_text += "üíµ –ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂ - –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ"
                else:
                    payment_text += "üí≥ –ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞ - –æ–ø–ª–∞—Ç–∞ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å"
                
                await query.edit_message_text(
                    payment_text,
                    reply_markup=get_back_keyboard()
                )
                
                await query.message.reply_text(
                    "üìç –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–±–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—à—Ç–∏:"
                )
                return ENTERING_ADDRESS
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
                await query.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞: —Å–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                    reply_markup=get_main_keyboard()
                )
                return CHOOSING_OPTION
        
        elif query.data == 'confirm_order':
            if user_id in user_data and all(key in user_data[user_id] for key in ['order_type', 'payment_method', 'address', 'order_details']):
                order_data = user_data[user_id]
                
                # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user = update.effective_user
                order_data['username'] = user.username or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
                order_data['first_name'] = user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                order_id = db.add_order(user_id, order_data)
                bot_stats['total_orders'] += 1
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                confirmation_text = f"""
‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!

üÜî –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}
üì¶ –¢–∏–ø: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if order_data['order_type'] == 'in_stock' else '–ü—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {'–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂' if order_data['payment_method'] == 'cash_on_delivery' else '–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞'}
üìç –ê–¥—Ä–µ—Å–∞: {order_data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìù –î–µ—Ç–∞–ª—ñ: {order_data.get('order_details', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}

üéâ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.
                """
                
                await query.edit_message_text(
                    confirmation_text,
                    reply_markup=get_main_keyboard()
                )
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                await send_admin_notification(context, order_id, user_id, order_data)
                
                # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if user_id in user_data:
                    del user_data[user_id]
                
                return CHOOSING_OPTION
            else:
                # –Ø–∫—â–æ –Ω–µ –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
                await query.edit_message_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤—Å—ñ –¥–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ",
                    reply_markup=get_main_keyboard()
                )
                return CHOOSING_OPTION
        
        elif query.data == 'admin_panel':
            if user_id in ADMIN_IDS:
                await query.edit_message_text(
                    "üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                    reply_markup=get_admin_keyboard()
                )
            else:
                await query.edit_message_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ!",
                    reply_markup=get_back_keyboard()
                )
        
        elif query.data == 'admin_broadcast':
            if user_id in ADMIN_IDS:
                await query.edit_message_text(
                    "üì¢ –†–æ–∑—Å–∏–ª–∫–∞\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –¢—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç", callback_data='broadcast_text_only')],
                        [InlineKeyboardButton("üì∏ –§–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º", callback_data='broadcast_photo_text')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
                    ])
                )
        
        elif query.data == 'broadcast_text_only':
            if user_id in ADMIN_IDS:
                await query.edit_message_text(
                    "üì¢ –†–æ–∑—Å–∏–ª–∫–∞ —Ç–µ–∫—Å—Ç—É\n\n–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º:",
                    reply_markup=get_back_keyboard()
                )
                context.user_data['admin_state'] = 'waiting_broadcast_text'
        
        elif query.data == 'broadcast_photo_text':
            if user_id in ADMIN_IDS:
                await query.edit_message_text(
                    "üì∏ –†–æ–∑—Å–∏–ª–∫–∞ —Ñ–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º\n\n–°–ø–æ—á–∞—Ç–∫—É –ø—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å —Ñ–æ—Ç–æ:",
                    reply_markup=get_back_keyboard()
                )
                context.user_data['admin_state'] = 'waiting_broadcast_photo'
        
        elif query.data == 'confirm_broadcast':
            if user_id in ADMIN_IDS:
                text = context.user_data.get('broadcast_text', '')
                photo_file_id = context.user_data.get('broadcast_photo')
                
                if not text:
                    await query.edit_message_text(
                        "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                        reply_markup=get_admin_keyboard()
                    )
                    return
                
                # –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–∑—Å–∏–ª–∫—É
                await query.edit_message_text(
                    "üì¢ –í–∏–∫–æ–Ω—É—é —Ä–æ–∑—Å–∏–ª–∫—É...",
                    reply_markup=get_back_keyboard()
                )
                
                success_count, error_count = await execute_broadcast(context, text, photo_file_id)
                
                # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
                if 'broadcast_text' in context.user_data:
                    del context.user_data['broadcast_text']
                if 'broadcast_photo' in context.user_data:
                    del context.user_data['broadcast_photo']
                if 'admin_state' in context.user_data:
                    del context.user_data['admin_state']
                
                result_text = f"""
‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}
‚ùå –ü–æ–º–∏–ª–∫–∏: {error_count}

üì¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
                """
                
                await query.edit_message_text(
                    result_text,
                    reply_markup=get_admin_keyboard()
                )
        
        elif query.data == 'change_broadcast':
            if user_id in ADMIN_IDS:
                # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ä–æ–∑—Å–∏–ª–∫–∏
                if 'broadcast_text' in context.user_data:
                    del context.user_data['broadcast_text']
                if 'broadcast_photo' in context.user_data:
                    del context.user_data['broadcast_photo']
                
                await query.edit_message_text(
                    "üì¢ –†–æ–∑—Å–∏–ª–∫–∞\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –¢—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç", callback_data='broadcast_text_only')],
                        [InlineKeyboardButton("üì∏ –§–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º", callback_data='broadcast_photo_text')],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
                    ])
                )
        
        elif query.data == 'admin_view_orders':
            if user_id in ADMIN_IDS:
                orders = db.get_recent_orders(10)
                if orders:
                    orders_text = "üìã –û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å:\n\n"
                    for order in orders:
                        orders_text += f"""
üÜî {order['id']}
üë§ {order['first_name']} (@{order['username']})
üìÖ {order['created_date'][:10]}
üì¶ {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if order['order_data']['order_type'] == 'in_stock' else '–ü—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
üí≥ {'–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂' if order['order_data']['payment_method'] == 'cash_on_delivery' else '–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞'}
üìç {order['order_data'].get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìù {order['order_data'].get('order_details', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üîó ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {order['user_id']}
                        """
                        orders_text += "\n" + "‚îÄ" * 50 + "\n"
                    
                    orders_text += "\nüí¨ –î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n"
                    orders_text += "/message –ù–û–ú–ï–†_–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –¢–ï–ö–°–¢_–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø"
                    
                    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
                    if len(orders_text) > 4096:
                        for i in range(0, len(orders_text), 4096):
                            await query.message.reply_text(orders_text[i:i+4096])
                    else:
                        await query.edit_message_text(orders_text, reply_markup=get_admin_keyboard())
                else:
                    await query.edit_message_text(
                        "üì≠ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å",
                        reply_markup=get_admin_keyboard()
                    )
        
        elif query.data == 'admin_stats':
            if user_id in ADMIN_IDS:
                uptime_hours = (datetime.now() - bot_stats['start_time']).total_seconds() / 3600
                stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime_hours:.1f} –≥–æ–¥–∏–Ω
üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {bot_stats['total_users']}
üì¶ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {bot_stats['total_orders']}
‚ùå –ü–æ–º–∏–ª–æ–∫: {bot_stats['errors']}
üîÑ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∏–π
                """
                
                await query.edit_message_text(
                    stats_text,
                    reply_markup=get_admin_keyboard()
                )
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ button_handler: {e}")
        bot_stats['errors'] += 1
        try:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
        except:
            pass
        return CHOOSING_OPTION

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∞
        if user_id in ADMIN_IDS and context.user_data.get('admin_state') == 'waiting_broadcast_text':
            await handle_broadcast_confirmation(update, context)
            return
        
        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if text == "üîô –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                WELCOME_MESSAGE,
                reply_markup=get_main_keyboard()
            )
            return CHOOSING_OPTION
        
        # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        if user_id in user_data and 'order_type' in user_data[user_id] and 'order_details' not in user_data[user_id]:
            user_data[user_id]['order_details'] = text
            
            await update.message.reply_text(
                "üí≥ –¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
                reply_markup=get_payment_keyboard()
            )
            return CHOOSING_PAYMENT
        
        # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
        if user_id in user_data and 'payment_method' in user_data[user_id] and 'address' not in user_data[user_id]:
            user_data[user_id]['address'] = text
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            order_data = user_data[user_id]
            summary_text = f"""
üìã –î–µ—Ç–∞–ª—ñ –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:

üèÄ –¢–∏–ø: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if order_data['order_type'] == 'in_stock' else '–ü—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {'–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂' if order_data['payment_method'] == 'cash_on_delivery' else '–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞'}
üìç –ê–¥—Ä–µ—Å–∞: {order_data['address']}
üìù –î–µ—Ç–∞–ª—ñ: {order_data.get('order_details', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}

‚úÖ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:
            """
            
            await update.message.reply_text(
                summary_text,
                reply_markup=get_confirm_keyboard()
            )
            return CONFIRMING_ORDER
        
        # –Ø–∫—â–æ –Ω–µ –≤–ø—ñ–∑–Ω–∞–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É
        await update.message.reply_text(
            "‚ùì –ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É.",
            reply_markup=get_main_keyboard()
        )
        return CHOOSING_OPTION
    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_message: {e}")
        bot_stats['errors'] += 1
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_keyboard()
        )
        return CHOOSING_OPTION

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"""
    try:
        user_id = update.effective_user.id
        
        if user_id in user_data and 'order_type' in user_data[user_id]:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]
            file_id = photo.file_id
            
            if 'photos' not in user_data[user_id]:
                user_data[user_id]['photos'] = []
            user_data[user_id]['photos'].append(file_id)
            
            await update.message.reply_text(
                "üì∏ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_photo: {e}")
        bot_stats['errors'] += 1
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )

async def handle_broadcast_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        user_id = update.effective_user.id
        text = update.message.text
        
        context.user_data['broadcast_text'] = text
        
        await update.message.reply_text(
            f"üì¢ –¢–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n{text}\n\n‚úÖ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data='confirm_broadcast')],
                [InlineKeyboardButton("‚ùå –ù—ñ, –∑–º—ñ–Ω–∏—Ç–∏", callback_data='change_broadcast')]
            ])
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_broadcast_confirmation: {e}")
        bot_stats['errors'] += 1

async def handle_broadcast_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        user_id = update.effective_user.id
        
        if user_id in ADMIN_IDS and context.user_data.get('admin_state') == 'waiting_broadcast_photo':
            photo = update.message.photo[-1]
            file_id = photo.file_id
            
            context.user_data['broadcast_photo'] = file_id
            
            await update.message.reply_text(
                "üì∏ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:"
            )
            context.user_data['admin_state'] = 'waiting_broadcast_text'
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ handle_broadcast_photo: {e}")
        bot_stats['errors'] += 1

async def execute_broadcast(context: ContextTypes.DEFAULT_TYPE, text: str, photo_file_id: str = None):
    """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
    try:
        users = db.get_all_users()
        success_count = 0
        error_count = 0
        
        for user in users:
            try:
                if photo_file_id:
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º
                    await context.bot.send_photo(
                        chat_id=user['user_id'],
                        photo=photo_file_id,
                        caption=text
                    )
                else:
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
                    await context.bot.send_message(
                        chat_id=user['user_id'],
                        text=text
                    )
                success_count += 1
                
                # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Å–ø–∞–º—É
                await asyncio.sleep(0.1)
                
            except Exception as e:
                error_count += 1
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")
        
        return success_count, error_count
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ execute_broadcast: {e}")
        bot_stats['errors'] += 1
        return 0, 0

async def send_admin_notification(context: ContextTypes.DEFAULT_TYPE, order_id: str, user_id: int, order_data: dict):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    try:
        admin_message = f"""
üÜï –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!

üÜî –ù–æ–º–µ—Ä: {order_id}
üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {order_data.get('username', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}
üÜî ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}
üì¶ –¢–∏–ø: {'–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ' if order_data['order_type'] == 'in_stock' else '–ü—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'}
üí≥ –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: {'–ù–∞–∫–ª–∞–¥–Ω–∏–π –ø–ª–∞—Ç—ñ–∂' if order_data['payment_method'] == 'cash_on_delivery' else '–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞'}
üìç –ê–¥—Ä–µ—Å–∞: {order_data.get('address', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
üìù –î–µ—Ç–∞–ª—ñ: {order_data.get('order_details', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}

üí¨ –î–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:
/message {order_id} –¢–ï–ö–°–¢_–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
        """
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É {admin_id}: {e}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ send_admin_notification: {e}")
        bot_stats['errors'] += 1

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    try:
        user_id = update.effective_user.id
        
        if user_id in ADMIN_IDS:
            await update.message.reply_text(
                "üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=get_admin_keyboard()
            )
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ!")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_command: {e}")
        bot_stats['errors'] += 1

async def message_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /message –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤"""
    try:
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
            return
        
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n"
                "/message –ù–û–ú–ï–†_–ó–ê–ú–û–í–õ–ï–ù–ù–Ø –¢–ï–ö–°–¢_–ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø"
            )
            return
        
        order_id = context.args[0]
        message_text = ' '.join(context.args[1:])
        
        order = db.get_order(order_id)
        if not order:
            await update.message.reply_text("‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        try:
            await context.bot.send_message(
                chat_id=order['user_id'],
                text=f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {SHOP_NAME}:\n\n{message_text}"
            )
            await update.message.reply_text(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–º–æ–≤–Ω–∏–∫—É {order_id}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ message_command: {e}")
        bot_stats['errors'] += 1

async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /broadcast –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤"""
    try:
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
            return
        
        await update.message.reply_text(
            "üì¢ –†–æ–∑—Å–∏–ª–∫–∞\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –¢—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç", callback_data='broadcast_text_only')],
                [InlineKeyboardButton("üì∏ –§–æ—Ç–æ –∑ —Ç–µ–∫—Å—Ç–æ–º", callback_data='broadcast_photo_text')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_panel')]
            ])
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ broadcast_command: {e}")
        bot_stats['errors'] += 1

async def view_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /view_users –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤"""
    try:
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
            return
        
        users = db.get_all_users()
        if users:
            users_text = f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}\n\n"
            for user in users:
                users_text += f"""
üë§ {user['first_name']} (@{user['username']})
üÜî ID: {user['user_id']}
üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user['joined_date'][:10]}
üì¶ –ó–∞–º–æ–≤–ª–µ–Ω—å: {user['orders_count']}
                """
                users_text += "\n" + "‚îÄ" * 30 + "\n"
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(users_text) > 4096:
                for i in range(0, len(users_text), 4096):
                    await update.message.reply_text(users_text[i:i+4096])
            else:
                await update.message.reply_text(users_text)
        else:
            await update.message.reply_text("üì≠ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ view_users_command: {e}")
        bot_stats['errors'] += 1

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤"""
    try:
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
            return
        
        uptime_hours = (datetime.now() - bot_stats['start_time']).total_seconds() / 3600
        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime_hours:.1f} –≥–æ–¥–∏–Ω
üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {bot_stats['total_users']}
üì¶ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {bot_stats['total_orders']}
‚ùå –ü–æ–º–∏–ª–æ–∫: {bot_stats['errors']}
üîÑ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∏–π
        """
        
        await update.message.reply_text(stats_text)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ stats_command: {e}")
        bot_stats['errors'] += 1

async def ping_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /ping –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
    try:
        start_time = datetime.now()
        await update.message.reply_text("üèì Pong!")
        end_time = datetime.now()
        
        response_time = (end_time - start_time).total_seconds() * 1000
        
        await update.message.reply_text(f"‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response_time:.2f} –º—Å")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ ping_command: {e}")
        bot_stats['errors'] += 1

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –≥—Ä–∞—Ü—ñ–æ–∑–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(sig, lambda s=sig: asyncio.create_task(graceful_shutdown(s, loop)))
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                CHOOSING_OPTION: [
                    CallbackQueryHandler(button_handler),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
                ],
                ENTERING_ORDER: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                    MessageHandler(filters.PHOTO, handle_photo),
                    CallbackQueryHandler(button_handler)
                ],
                CHOOSING_PAYMENT: [
                    CallbackQueryHandler(button_handler),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
                ],
                ENTERING_ADDRESS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                    CallbackQueryHandler(button_handler)
                ],
                CONFIRMING_ORDER: [
                    CallbackQueryHandler(button_handler),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
                ]
            },
            fallbacks=[CommandHandler('start', start)]
        )
        
        application.add_handler(conv_handler)
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ (–ø–æ–∑–∞ ConversationHandler)
        application.add_handler(MessageHandler(filters.PHOTO, handle_broadcast_photo))
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω–∞
        application.add_handler(CommandHandler('admin', admin_command))
        application.add_handler(CommandHandler('message', message_command))
        application.add_handler(CommandHandler('broadcast', broadcast_command))
        application.add_handler(CommandHandler('view_users', view_users_command))
        application.add_handler(CommandHandler('stats', stats_command))
        application.add_handler(CommandHandler('ping', ping_command))
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
        logger.info(f"üë• –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏: {ADMIN_IDS}")
        logger.info(f"üèÄ –ù–∞–∑–≤–∞ –º–∞–≥–∞–∑–∏–Ω—É: {SHOP_NAME}")
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ main: {e}")
        bot_stats['errors'] += 1
        sys.exit(1)

if __name__ == '__main__':
    main()
